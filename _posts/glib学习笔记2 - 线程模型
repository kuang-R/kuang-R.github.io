### AsyncQueue
异步队列，用于多线程操作。这个队列保存的是指针，也就是说要线程自己管理资源的分配和释放。很多方法都有对应的unlocked版本，这是必须在持有队列锁（也就是调用了lock）之后调用的版本，否则可能会产生死锁。

我猜unlocked是为了加快调用速度，避免很多push这种操作对信号量申请过多。

``` c
#include <glib.h>
gpointer producer(gpointer data)
{
	GAsyncQueue *async_queue = data;
	for (int i = 0; TRUE; i++) {
		int *t = g_malloc(sizeof(i));
		*t = i;
		g_async_queue_push(async_queue, t);
	}
}
gpointer consumer(gpointer data)
{
	GAsyncQueue *async_queue = data;
	while (TRUE) {
		int *t = g_async_queue_pop(async_queue);
		g_print("%d ", *t);
		g_free(t);
	}
}
int main()
{
	GMainLoop *main_loop = g_main_loop_new(NULL, FALSE);
	GThread *th1, *th2;
	GAsyncQueue *async_queue = g_async_queue_new();

	th1 = g_thread_new("Producer", producer, async_queue);
	th2 = g_thread_new("Consumer", consumer, async_queue);

	g_main_loop_run(main_loop);
}
```
